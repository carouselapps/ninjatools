<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1445468559368">{:repl-history {:ide [], :local [&quot;(db/delete-all!)&quot; &quot;(repopulate-db!)&quot; &quot;(Thread/sleep 1000)&quot; &quot;(get-integrations-for {:tool_id \&quot;146c3e12-50fa-4482-b4a2-6dab9c52ca9a\&quot;})&quot; &quot;(get-integrations-for {:tool_id (java.util.UUID. \&quot;146c3e12-50fa-4482-b4a2-6dab9c52ca9a\&quot;)})&quot; &quot;(get-integrations-for {:tool_id (java.util.UUID/fromString \&quot;146c3e12-50fa-4482-b4a2-6dab9c52ca9a\&quot;)})&quot; &quot;(get-integrations-for \&quot;146c3e12-50fa-4482-b4a2-6dab9c52ca9a\&quot;)&quot; &quot;(get-in {} [:foo :bar])&quot; &quot;(empty? {})&quot; &quot;(empty? nil)&quot; &quot;(atom)&quot; &quot;(atom nil)&quot; &quot;(sh/sh \&quot;ls\&quot;)&quot; &quot;(sh/sh \&quot;node\&quot;)&quot; &quot;(sh/sh \&quot;node\&quot; \&quot;/Users/pupeno/Projects/ninjatools/resources/public/js/server-side.js\&quot;)&quot; &quot;nodejs&quot; &quot;@nodejs&quot; &quot;(class nodejs)&quot; &quot;(class @nodejs)&quot; &quot;(class @@nodejs)&quot; &quot;(ensure-nodejs-is-running)&quot; &quot;(blank? \&quot;\&quot;)&quot; &quot;(clojure.string.blank? \&quot;u\&quot;)&quot; &quot;(** 2 8)&quot; &quot;(* 2 2 2 2 2 2 2 2)&quot; &quot;(* 2 2 2 2 2 2 2 2 2 2 2 2 2)&quot; &quot;(* 2 2 2 2 2 2 2 2 2 2 2 2 2 2)&quot; &quot;(* 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2)&quot; &quot;(require 'clojure.contrib.math)&quot; &quot;(* 2 2 2 2 2 2)&quot; &quot;(* 2 2 2 2 2 2 2 2 2)&quot; &quot;(* 2 2 2 2 2 2 2 2 2 2)&quot; &quot;(java.io.File/createTempFile \&quot;prerenderer\&quot; \&quot;port\&quot;)&quot; &quot;(.deleteOnExit (java.io.File/createTempFile \&quot;prerenderer\&quot; \&quot;.port\&quot;))&quot; &quot;(name *ns*)&quot; &quot;(str *ns*)&quot; &quot;(str \&quot;foo\&quot; *ns*)&quot; &quot;(ns projectx.routes\n  (:require [clojure.set :refer [rename-keys]]\n            [domkm.silk :as silk]\n            [pushy.core :as pushy]\n            [re-frame.core :as re-frame]))\n\n(def routes (silk/routes [[:home [[]]]\n                          [:about [[\&quot;about\&quot;]]]]))&quot; &quot;(ns projectx.routes\n  (:require [clojure.set :refer [rename-keys]]\n            [domkm.silk :as silk]))\n\n(def routes (silk/routes [[:home [[]]]\n                          [:about [[\&quot;about\&quot;]]]]))&quot; &quot;(defn parse-url [url]\n  (silk/arrive routes url))&quot; &quot;(parse-url \&quot;/\&quot;)&quot; &quot;(parse-url \&quot;/about\&quot;)&quot; &quot;(parse-url \&quot;/about?\&quot;)&quot; &quot;(parse-url \&quot;/about?foo=bar\&quot;)&quot; &quot;(assert-difference (users-count) 1\n                   (add-user 'ramon2))&quot; &quot;(macroexpand-1 (assert-difference (users-count) 1\n                    (add-user 'ramon2)))&quot; &quot;RegistrationSchema&quot; &quot;(validation-errors-schema RegistrationSchema)&quot; &quot;(buddy.hashers/encrypt \&quot;ueoa\&quot;)&quot; &quot;buddy.hashers&quot; &quot;buddy.hashers/encrypt&quot; &quot;(use 'buddy.hashers)&quot; &quot;(buddy.hashers/encrypt \&quot;foo\&quot;)&quot; &quot;(create {:email \&quot;foo@foo.com\&quot; :password \&quot;foo\&quot; :password-confirmation \&quot;foo\&quot;})&quot; &quot;(db/connect!)&quot; &quot;(create {:email \&quot;foo@foo.com\&quot; :password \&quot;foobarbin\&quot; :password-confirmation \&quot;foobarbin\&quot;})&quot; &quot;(create {:email \&quot;foo2@foo.com\&quot; :password \&quot;foobarbin\&quot; :password-confirmation \&quot;foobarbin\&quot;})&quot; &quot;(:session {})&quot; &quot;(:session {} false)&quot; &quot;(:session {} :foo)&quot; &quot;(def shape {:type :circle\n            :radius 5})&quot; &quot;(get :type shape)&quot; &quot;(get shape :type)&quot; &quot;(:type shape)&quot; &quot;(def person {:name {:first \&quot;Pablo\&quot; :last \&quot;Fernandez\&quot;} :age 33 :email \&quot;pupeno@pupeno.com\&quot;})&quot; &quot;persistent!&quot; &quot;(assoc person :age 33)&quot; &quot;(assoc person :age 34)&quot; &quot;(def person (assoc person :age 34))&quot; &quot;(def person (assoc-in person [:name :first] \&quot;J. Pablo\&quot;))&quot; &quot;person&quot; &quot;(require '[buddy.sign.jws :as jws])\n&quot; &quot;(jws/sign {:userid 1} \&quot;secret\&quot;)&quot; &quot;(let [a (jws/sign {:userid 1} \&quot;secret\&quot;)] [(count a) a])&quot; &quot;(let [a (jws/sign {:userid 1} \&quot;secrtuhoeathuteoahutahcuheocuhcaohucehuceaohceouhuceoahuchaocoaet\&quot;)] [(count a) a])&quot; &quot;(let [a (jws/sign {:userid 1, :foo :bar} \&quot;secrtuhoeathuteoahutahcuheocuhcaohucehuceaohceouhuceoahuchaocoaet\&quot;)] [(count a) a])&quot; &quot;(require '[buddy.sign.jwe :as jwe])\n(require '[buddy.core.hash :as hash])&quot; &quot;(def secret (hash/sha256 \&quot;mysecret\&quot;))\n&quot; &quot;secret&quot; &quot;(jwe/encrypt {:userid 1} secret {:alg :dir :enc :a128-hs256})\n&quot; &quot;(jwe/encrypt {:userid 1} secret {:alg :dir :enc :a128cbc-hs256})&quot; &quot;(def user (get-user-by-email \&quot;pupeno@pupeno.com\&quot;))&quot; &quot;(generate-reset-password-token {:id (:id user)})&quot; &quot;(generate-reset-password-token&lt;! {:id (:id user)})&quot; &quot;(generate-reset-password-token&lt;! user)&quot; &quot;*ns*&quot; &quot;(connect!)&quot; &quot;(get-user-by-email- {:email \&quot;pupeno@pupeno.com\&quot;})&quot; &quot;(get-user-by-email- {:email \&quot;pupeno@pupeno.com\&quot;, :foo-bar \&quot;meh\&quot;})&quot; &quot;(+ 1 1)&quot; &quot;prerenderer/run&quot; &quot;(prerenderer/run {:path              \&quot;target/js/server-side.js\&quot;\n                  :default-ajax-port 3000\n                  :wait              (env :dev)})&quot; &quot;(.getID (:process js))&quot; &quot;(.hashCode (:process js))&quot; &quot;(def js (prerenderer/run {:path              \&quot;target/js/server-side.js\&quot;\n                       :default-ajax-port 3000\n                       :wait              (env :dev)}))&quot; &quot;(:process js)&quot; &quot;(def js2 (prerenderer/stop js))&quot; &quot;js&quot; &quot;js2&quot; &quot;(.isAlive (:process js))&quot; &quot;(.isAlive (:process js2))&quot;], :remote []}}</component>
</project>