<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1442738753834">{:repl-history {:ide [], :local [&quot;(disconnect!)&quot; &quot;(csk/-&gt;snake_case \&quot;Foo Bar-bi_meh\&quot;)&quot; &quot;(.toLowerCase \&quot;Foo\&quot;)&quot; &quot;(delete-all!)&quot; &quot;(populate-db)&quot; &quot;(connect!)&quot; &quot;(db/delete-all!)&quot; &quot;(db/connect!)&quot; &quot;(repopulate-db!)&quot; &quot;(Thread/sleep 1000)&quot; &quot;(get-integrations-for {:tool_id \&quot;146c3e12-50fa-4482-b4a2-6dab9c52ca9a\&quot;})&quot; &quot;(get-integrations-for {:tool_id (java.util.UUID. \&quot;146c3e12-50fa-4482-b4a2-6dab9c52ca9a\&quot;)})&quot; &quot;(get-integrations-for {:tool_id (java.util.UUID/fromString \&quot;146c3e12-50fa-4482-b4a2-6dab9c52ca9a\&quot;)})&quot; &quot;(get-integrations-for \&quot;146c3e12-50fa-4482-b4a2-6dab9c52ca9a\&quot;)&quot; &quot;(get-in {} [:foo :bar])&quot; &quot;(empty? {})&quot; &quot;(empty? nil)&quot; &quot;(atom)&quot; &quot;(atom nil)&quot; &quot;(sh/sh \&quot;ls\&quot;)&quot; &quot;(sh/sh \&quot;node\&quot;)&quot; &quot;(sh/sh \&quot;node\&quot; \&quot;/Users/pupeno/Projects/ninjatools/resources/public/js/server-side.js\&quot;)&quot; &quot;nodejs&quot; &quot;@nodejs&quot; &quot;(class nodejs)&quot; &quot;(class @nodejs)&quot; &quot;(class @@nodejs)&quot; &quot;(ensure-nodejs-is-running)&quot; &quot;(blank? \&quot;\&quot;)&quot; &quot;(clojure.string.blank? \&quot;u\&quot;)&quot; &quot;(** 2 8)&quot; &quot;(* 2 2 2 2 2 2 2 2)&quot; &quot;(* 2 2 2 2 2 2 2 2 2 2 2 2 2)&quot; &quot;(* 2 2 2 2 2 2 2 2 2 2 2 2 2 2)&quot; &quot;(* 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2)&quot; &quot;(require 'clojure.contrib.math)&quot; &quot;(* 2 2 2 2 2 2)&quot; &quot;(* 2 2 2 2 2 2 2 2 2)&quot; &quot;(* 2 2 2 2 2 2 2 2 2 2)&quot; &quot;(java.io.File/createTempFile \&quot;prerenderer\&quot; \&quot;port\&quot;)&quot; &quot;(.deleteOnExit (java.io.File/createTempFile \&quot;prerenderer\&quot; \&quot;.port\&quot;))&quot; &quot;*ns*&quot; &quot;(name *ns*)&quot; &quot;(str *ns*)&quot; &quot;(str \&quot;foo\&quot; *ns*)&quot; &quot;(ns projectx.routes\n  (:require [clojure.set :refer [rename-keys]]\n            [domkm.silk :as silk]\n            [pushy.core :as pushy]\n            [re-frame.core :as re-frame]))\n\n(def routes (silk/routes [[:home [[]]]\n                          [:about [[\&quot;about\&quot;]]]]))&quot; &quot;(ns projectx.routes\n  (:require [clojure.set :refer [rename-keys]]\n            [domkm.silk :as silk]))\n\n(def routes (silk/routes [[:home [[]]]\n                          [:about [[\&quot;about\&quot;]]]]))&quot; &quot;(defn parse-url [url]\n  (silk/arrive routes url))&quot; &quot;(parse-url \&quot;/\&quot;)&quot; &quot;(parse-url \&quot;/about\&quot;)&quot; &quot;(parse-url \&quot;/about?\&quot;)&quot; &quot;(parse-url \&quot;/about?foo=bar\&quot;)&quot;], :remote []}}</component>
</project>